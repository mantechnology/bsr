#!/bin/bash
#
# chkconfig: - 21 08
# description: Loads and unloads the bsr module
#
# Copyright 2007-2020 Man Technology inc
#
# Man Technology inc
#
### BEGIN INIT INFO
# Provides: bsr
# Required-Start: $local_fs $network $syslog
# Required-Stop:  $local_fs $network $syslog
# Should-Start:   sshd multipathd
# Should-Stop:    sshd multipathd
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# X-Start-Before: heartbeat corosync
# X-Stop-After:   heartbeat corosync
# X-Interactive:  true
# Short-Description:    Control bsr resources.
### END INIT INFO

DEFAULTFILE="/etc/default/bsr"
BSRADM="bsradm"
BSRSETUP="bsrsetup"
BSRCON="bsrcon"
PROC_BSR="/proc/bsr"
MODPROBE="/sbin/modprobe"
RMMOD="/sbin/rmmod"
UDEV_TIMEOUT=10
ADD_MOD_PARAM=""
LOSETUP="losetup"

PATH=/usr/sbin:/sbin:$PATH

if [ -f $DEFAULTFILE ]; then
  . $DEFAULTFILE
fi

# we only use these two functions, define fallback versions of them ...
log_daemon_msg() { echo -n "${1:-}: ${2:-}"; }
log_end_msg() { echo "."; }
# ... and let the lsb override them, if it thinks it knows better.
if [ -f /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
fi

assure_module_is_loaded()
{
    [ -e "$PROC_BSR" ] && return

	# BSR-1089 BSR-1097 if modprobe provides the --allow-unsupported option, use it.
    $MODPROBE --dry-run --allow-unsupported bsr > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        $MODPROBE -s --allow-unsupported bsr $ADD_MOD_PARAM
    else
        $MODPROBE -s bsr $ADD_MOD_PARAM
    fi

    if [ $? -ge 1 ]; then
        echo "Can not load the bsr module."$'\n'
        exit 5 # LSB for "not installed"
    fi
    # tell klogd to reload module symbol information ...
    [ -e /var/run/klogd.pid ] && [ -x /sbin/klogd ] && /sbin/klogd -i
}

bsr_pretty_status()
{
	local proc_bsr=$1
	# add resource names
	if ! type column &> /dev/null ||
	   ! type paste &> /dev/null ||
	   ! type join &> /dev/null ||
	   ! type sed &> /dev/null ||
	   ! type tr &> /dev/null
	then
		cat "$proc_bsr"
		return
	fi
	sed -e '2q' < "$proc_bsr"
	sed_script=$(
		i=0;
		_sh_status_process() {
			let i++ ;
			stacked=${_stacked_on:+"^^${_stacked_on_minor:-${_stacked_on//[!a-zA-Z0-9_ -]/_}}"}
			printf "s|^ *%u:|%6u\t&%s%s|\n" \
				$_minor $i \
				"${_res_name//[!a-zA-Z0-9_ -]/_}" "$stacked"
		};
		eval "$(bsradm sh-status)" )

	p() {
		sed -e "1,2d" \
		      -e "$sed_script" \
		      -e '/^ *[0-9]\+: cs:Unconfigured/d;' \
		      -e 's/^\(.* cs:.*[^ ]\)   \([rs]...\)$/\1 - \2/g' \
		      -e 's/^\(.* \)cs:\([^ ]* \)st:\([^ ]* \)ds:\([^ ]*\)/\1\2\3\4/' \
		      -e 's/^\(.* \)cs:\([^ ]* \)ro:\([^ ]* \)ds:\([^ ]*\)/\1\2\3\4/' \
		      -e 's/^\(.* \)cs:\([^ ]*\)$/\1\2/' \
		      -e 's/^ *[0-9]\+:/ x &??not-found??/;' \
		      -e '/^$/d;/ns:.*nr:.*dw:/d;/resync:/d;/act_log:/d;' \
		      -e 's/^\(.\[.*\)\(sync.ed:\)/... ... \2/;/^.finish:/d;' \
		      -e 's/^\(.[0-9 %]*oos:\)/... ... \1/' \
		      < "$proc_bsr" | tr -s '\t ' '  ' 
	}
	m() {
		join -1 2 -2 1 -o 1.1,2.2,2.3 \
			<( ( bsradm sh-dev all ; bsradm -S sh-dev all ) | cat -n | sort -k2,2) \
			<(sort < /proc/mounts ) |
			sort -n | tr -s '\t ' '  ' | sed -e 's/^ *//'
	}
	# echo "=== p ==="
	# p
	# echo "=== m ==="
	# m
	# echo "========="
	# join -a1 <(p|sort) <(m|sort)
	# echo "========="
	(
	echo m:res cs ro ds p mounted fstype
	join -a1 <(p|sort) <(m|sort) | cut -d' ' -f2-6,8- | sort -k1,1n -k2,2
	) | column -t
}

# Try to settle regardless of udev version or presence,
# so "/etc/init.d/bsr stop" is able to rmmod, without interfering
# temporary module references caused by udev scanning the devices.
# But don't wait too long.
_udev_settle()
{
	if udevadm version ; then
		# ok, we have udevadm, use it.
		udevadm settle --timeout=5
	else
		# if udevsettle is not there,
		# no matter.
		udevsettle --timeout=5
	fi
}

run_hook()
{
	n="hook_$1"
	if t=$(type -t "$n") && [[ "$t" == "function" ]] ; then
		shift
		"$n" "$@"
	fi
}

# BSR-688
run_bsrmon()
{
	case "$1" in
		start)
			# BSR-695
			mon_file=/etc/bsr.d/.bsrmon_run
			mon_run=1
			if [ -f $mon_file ]; then
				mon_run=`cat $mon_file`
			fi
			if [ $mon_run -eq 1 ] ; then
				check_ps=`ps -ef | grep bsrmon-run | grep -v grep | wc -l`
				if [ $check_ps == "0" ]; then
					nohup bsrmon-run > /dev/null 2>&1 &
				fi
			fi
		;;
		stop)
			for pid in `pgrep bsrmon-run`
			do
				kill -TERM $pid >/dev/null 2>&1;
			done
		;;
		*)
		exit 1
		;;
	esac
}

case "$1" in
    start)
	# no module, no BSR.
	assure_module_is_loaded

	# Just in case bsradm want to display any errors in the configuration
	# file, or we need to ask the user about registering this installation
	# at http://usage.bsr.org, we call bsradm here without any IO
	# redirection.
	# If "no op" has a non-zero exit code, the config is unusable,
	# and every other command will fail.
	out=$($BSRADM sh-nop 2>&1); ex=$?
	[[ $ex = 127 ]] && exit 5 # LSB for "not installed"
	$BSRCON /write_kernel_log 6 "service starting"
	log_daemon_msg "Starting BSR resources"
	if [[ $ex != 0 ]] ; then
	    printf "\n%s\n" "$out" >&2
	    log_end_msg 1
	    exit 6 # LSB for "not configured"
	fi

	# BSR-5 set up the loop device at service start.
	# _LIN_LOOP_META_SUPPORT
	RES_LIST=""
	for RES in `$BSRADM sh-resources-list`; do
		# BSR-592 apply svc-auto-up to linux
		if ! $BSRADM sh-node-option -n svc_auto_up $RES | grep -w no &> /dev/null; then
			
			MD_IDX=$($BSRADM sh-md-idx $RES | grep '/')
			if [ -n "$MD_IDX" ]; then
				if [ -z "$($LOSETUP -j $MD_IDX)" ]; then
					MD_DEV=$($BSRADM sh-md-dev $RES 2>&1)
					$LOSETUP $MD_DEV $MD_IDX
				fi
			fi
			if [ -n "$RES_LIST" ]; then
				RES_LIST="${RES_LIST} ${RES}"
			else 
				RES_LIST="${RES}"
			fi
		else
			echo skip adjust $RES
		fi
		
	done

	if [ -n "$RES_LIST" ]; then
		$BSRADM adjust-with-progress $RES_LIST
		[[ $? -gt 1 ]] && exit 20

		# make sure udev has time to create the device files
		# FIXME this probably should, on platforms that have it,
		# use udevadm settle --timeout=X --exit-if-exists=$DEVICE

		for DEVICE in `$BSRADM sh-dev $RES_LIST`; do
			UDEV_TIMEOUT_LOCAL=$UDEV_TIMEOUT
			while [ ! -e $DEVICE ] && [ $UDEV_TIMEOUT_LOCAL -gt 0 ] ; do
			sleep 1
			UDEV_TIMEOUT_LOCAL=$(( $UDEV_TIMEOUT_LOCAL-1 ))
			done
		done


		[ -d /var/lock/subsys ] && touch /var/lock/subsys/bsr	# for RedHat
		run_hook start_before-wait
		# BSR-864 excluded because it can be in infinite wait when the peer node is offline
		#$BSRADM wait-con-int # User interruptible version of wait-connect all
		run_hook start
		
	fi

	run_bsrmon start
	$BSRCON /write_kernel_log 6 "service start"
	;;
    stop)
	$BSRADM sh-nop
	[[ $? = 127 ]] && exit 5 # LSB for "not installed"
	$BSRCON /write_kernel_log 6 "service stopping"
	log_daemon_msg "Stopping all BSR resources"

	run_bsrmon stop

	for try in 1 2; do
		stop_failed=0
	    if [ -e $PROC_BSR ] ; then
		[[ $try = 2 ]] && echo "Retrying once..."
		# bypass bsradm and bsr config file and everything,
		# to avoid leaving devices around that are not referenced by
		# the current config file, or in case the current config file
		# does not parse for some reason.
		# BSR-386 rename "bsr" to "bsr" to be the same as name of major device due to pvcreate error
		for res in $($BSRADM sh-resources); do
			# BSR-593 auto-down by svc
			if ! $BSRADM sh-node-option -n svc_auto_down $res | grep -w no &> /dev/null; then
				for d in `$BSRADM sh-dev $res`; do
					[ -L "$d" ] && continue
					[ -b "$d" ] || continue
					M=$(umount "$d" 2>&1)
					case $M in
					*" not mounted") :;;
					*) echo "$M" >&2 ;;
					esac
				done
				$BSRSETUP down "$res" || stop_failed=1
			else
				echo skip down $res
			fi
		done
		_udev_settle &> /dev/null
		
		# BSR-792 disable kernel module unload
		# if [ -d /sys/module/bsr/holders ]; then
		#	(cd /sys/module/bsr/holders; for tr in *; do [ -d ${tr} ] && ${RMMOD} ${tr}; done)
		# fi
		# if grep -qw drbd /proc/modules; then
		#	$RMMOD bsr || stop_failed=1
		# fi
		[ $stop_failed = 0 ] && break
	    fi
	done
	run_hook stop
	[ -f /var/lock/subsys/bsr ] && rm /var/lock/subsys/bsr
	$BSRCON /write_kernel_log 6 "service stop"
	log_end_msg 0
	;;
    status)
	# NEEDS to be heartbeat friendly...
	# so: put some "OK" in the output.
	if [ -e $PROC_BSR ]; then
	    echo "bsr driver loaded OK; device status:"
	    bsr_pretty_status $PROC_BSR 2>/dev/null
	    exit 0
	else
	    echo >&2 "bsr not loaded"
	    exit 3
	fi
	;;
    reload)
	$BSRADM sh-nop
	[[ $? = 127 ]] && exit 5 # LSB for "not installed"
	$BSRCON /write_kernel_log 6 "service reloading"
	log_daemon_msg  "Reloading BSR configuration"
	
	run_bsrmon stop	
	$BSRADM adjust all
	run_bsrmon start

	run_hook reload
	$BSRCON /write_kernel_log 6 "service reload"
	log_end_msg 0
	;;
    restart|force-reload)
	( . $0 stop )
	( . $0 start )
	;;
    *)
	echo "Usage: /etc/init.d/bsr {start|stop|status|reload|restart|force-reload}"
	exit 1
	;;
esac

exit 0
